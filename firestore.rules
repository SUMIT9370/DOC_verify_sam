/**
 * @fileOverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with a focus on user-owned data and admin-protected resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the user themselves.
 * - /users/{userId}/verification_history/{historyId}: Stores verification histories for each user; only the user can access their history.
 * - /document_masters/{masterId}: Stores document master templates; only admins can create, update, or delete these.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data; only admins have access.
 *
 * Key Security Decisions:
 * - User data is strictly owned and controlled by the user.
 * - Admin-level functionality is protected behind an `isAdmin` flag on the user document.
 * - Data validation during write operations is minimized in this prototyping phase, focusing on authorization and relationship integrity.
 * - List operations are generally allowed for user-owned data but restricted for admin data.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` flag is stored directly on the user document to avoid costly `get()` calls to a separate roles collection.
 *
 * Structural Segregation:
 * - Different data types (user profiles, documents, verification checks) are stored in separate collections to simplify rule logic and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profiles.
     * @path /users/{userId}
     * @allow (create) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can create their own profile if their UID matches the {userId} parameter.
     * @allow (get, update, delete) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can read, update, or delete their own profile.
     * @deny (create) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' cannot create a profile with a different {userId}.
     * @deny (get, update, delete) User 'randomUserId' cannot read, update, or delete User 'BjtRMzHAp9OW27q60hjLVlkmeH12's profile.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isNewOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own verification history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can create a history entry under their own user ID.
     * @allow (get, list, update, delete) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can read, list, update, or delete their own history entries.
     * @deny (create) User 'randomUserId' cannot create a history entry under User 'BjtRMzHAp9OW27q60hjLVlkmeH12's ID.
     * @deny (get, list, update, delete) User 'randomUserId' cannot read, list, update, or delete User 'BjtRMzHAp9OW27q60hjLVlkmeH12's history entries.
     * @principle Enforces user ownership for verification history data.
     */
    match /users/{userId}/verification_history/{historyId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows admins to manage document master templates.
     * @path /document_masters/{masterId}
     * @allow (get, list) Any user can read existing document masters.
     * @allow (create, update, delete) Only admins can create, update, or delete document masters.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete document masters.
     * @principle Restricts access to document master templates to admin users.
     */
    match /document_masters/{masterId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Only admins can read admin dashboard data.
     * @allow (create, update, delete) Only admins can create, update, or delete admin dashboard data.
     * @deny (get, list, create, update, delete) Non-admin users cannot access admin dashboard data.
     * @principle Restricts access to admin dashboard data to admin users.
     */
    match /admin_dashboards/{dashboardId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isNewOwner(userId) {
        return request.auth.uid == userId && request.resource.data.id == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}