/**
 * @fileOverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated verification histories.
 * Administrative access is granted to specific collections based on the `isAdmin` field in the user document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with access restricted to the owning user.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history for each user, accessible only by the user.
 * - /document_masters/{masterId}: Stores master educational document templates, accessible only by admins.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All writes are protected by authorization checks.
 * - The `isAdmin` field on the user document determines administrative privileges.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` field is denormalized onto the user document to enable efficient admin role checks without additional reads.
 *
 * Structural Segregation:
 * - Verification histories are stored as a subcollection of user documents, ensuring clear ownership and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their profile.
     * @allow (get, list, update, delete) - User with matching UID can read, update, or delete their profile.
     * @deny (create, get, list, update, delete) - Any other user cannot access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure verification history for a user. Only the owner can read or write their own history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) - User can create a history record under their own profile.
     * @allow (get, list, update, delete) - User can read, update, or delete their own history records.
     * @deny (create, get, list, update, delete) - Any other user cannot access this history.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure educational document masters. Only admins can read or write these documents.
     * @path /document_masters/{masterId}
     * @allow (create, update, delete) - User must be an admin to create, update, or delete master documents.
     * @allow (get, list) - User must be an admin to get or list master documents.
     * @deny (create, get, list, update, delete) - Non-admin users cannot access this collection.
     * @principle Restricts access to admins based on the `isAdmin` field in their user profile.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure admin dashboard data. Only admins can read or write these documents.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create, update, delete) - User must be an admin to create, update, or delete dashboard data.
     * @allow (get, list) - User must be an admin to get or list dashboard data.
     * @deny (create, get, list, update, delete) - Non-admin users cannot access this collection.
     * @principle Restricts access to admins based on the `isAdmin` field in their user profile.
     */
    match /admin_dashboards/{dashboardId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}