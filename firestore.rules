/**
 * @file Firebase Security Rules for DocVerify
 * @version 2
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles and verification histories,
 * with admin-only access to educational document masters and admin dashboards.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history, accessible only by the user.
 * - /document_masters/{masterId}: Stores educational document templates, accessible only by admins.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only by admins.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles and verification histories.
 * - Listing of all users is explicitly denied.
 * - Admin access is determined by the `isAdmin` field in the user's profile.
 * - Write operations are strictly controlled and require appropriate authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on user ID.
     * @path /users/{userId}
     * @allow (create) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can create their own profile.
     * @allow (get) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can read their own profile.
     * @allow (update) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can update their own profile.
     * @allow (delete) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can delete their own profile.
     * @deny (create) User 'attackerUid' cannot create a profile with userId 'BjtRMzHAp9OW27q60hjLVlkmeH12'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to verification history subcollection based on user ID.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can create a verification history record for themselves.
     * @allow (get) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can read a verification history record for themselves.
     * @allow (update) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can update a verification history record for themselves.
     * @allow (delete) User 'BjtRMzHAp9OW27q60hjLVlkmeH12' can delete a verification history record for themselves.
     * @deny (create) User 'attackerUid' cannot create a history record for userId 'BjtRMzHAp9OW27q60hjLVlkmeH12'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/verification_history/{historyId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId); // Owner can list their own history

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to educational document masters only to admins.
     * @path /document_masters/{masterId}
     * @allow (get) Admins can read educational document masters.
     * @allow (list) Admins can list educational document masters.
     * @allow (create) Admins can create educational document masters.
     * @allow (update) Admins can update educational document masters.
     * @allow (delete) Admins can delete educational document masters.
     * @deny (create) Non-admin user cannot create educational document masters.
     * @principle Restricts access to educational document masters to admins only.
     */
    match /document_masters/{masterId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to admin dashboards only to admins.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get) Admins can read admin dashboards.
     * @allow (list) Admins can list admin dashboards.
     * @allow (create) Admins can create admin dashboards.
     * @allow (update) Admins can update admin dashboards.
     * @allow (delete) Admins can delete admin dashboards.
     * @deny (create) Non-admin user cannot create admin dashboards.
     * @principle Restricts access to admin dashboards to admins only.
     */
    match /admin_dashboards/{dashboardId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    //------------------ Helper functions ------------------

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document and the document exists.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    // Checks if the user is an admin.
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}