rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) User with matching UID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (update) User cannot update another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with matching UID can create documents.
     * @allow (get, list, update, delete) User with matching UID can read, update, and delete their own documents.
     * @deny (create) User cannot create documents under another user's ID.
     * @deny (update) User cannot update another user's documents.
     * @principle Enforces document ownership and data integrity.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to educational document masters.
     * @path /document_masters/{masterId}
     * @allow (get, list) Admins can read master documents.
     * @allow (create, update, delete) Admins can create, update, and delete master documents.
     * @deny (get, list, create, update, delete) Non-admins cannot access master documents.
     * @principle Restricts access to authorized admins only.
     */
    match /document_masters/{masterId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to verification checks.
     * @path /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId}
     * @allow (create) User with matching UID can create verification checks for their documents.
     * @allow (get, list, update, delete) User with matching UID can read, update, and delete their own verification checks.
     * @deny (create) User cannot create verification checks under another user's ID or document.
     * @deny (update) User cannot update another user's verification checks.
     * @principle Enforces document ownership and relational integrity through path-based checks.
     */
    match /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) Only the backend can create admin roles.
     * @allow (get) Any authenticated user can check if they are an admin.
     * @deny (list, update, delete) Listing, updating, and deleting are not allowed.
     */
    match /roles_admin/{uid} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if request.auth != null;
      allow list: if false;
      allow create: if false; // Only backend should create these documents.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to admin dashboards.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Admins can read dashboard data.
     * @allow (create, update, delete) Admins can create, update, and delete dashboard data.
     * @deny (get, list, create, update, delete) Non-admins cannot access dashboard data.
     * @principle Restricts access to authorized admins only.
     */
    match /admin_dashboards/{dashboardId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}