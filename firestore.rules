/**
 * @fileoverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data and restricts administrative data to admin users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history for a user.
 * - /document_masters/{masterId}: Stores master educational document templates.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data.
 *
 * Key Security Decisions:
 * - User data is private and accessible only to the owning user.
 * - Admin data is accessible only to users with the 'isAdmin' flag set to true.
 * - Data validation is limited to authorization-critical fields.
 *
 * Denormalization for Authorization:
 * The 'isAdmin' flag on the User document is used to quickly determine admin privileges without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (auth.uid == userId).
     * @allow (get, list, update, delete) If the user is the owner of the profile (auth.uid == userId).
     * @deny (create) If the user is trying to create a profile for another user.
     * @deny (update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow a user to get their own profile.
      allow get: if isOwner(userId);

      // Only the owner can list their profile (useful if this collection is ever accidentally exposed).
      allow list: if isOwner(userId);

      // Allow the user to update their own profile, enforcing immutability of the id field.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to verification history for a user.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create, get, list, update, delete) If the user is the owner of the verification history (auth.uid == userId).
     * @deny (create, update, delete) If the user is not the owner of the verification history.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/verification_history/{historyId} {
      // Helper function to check if the user is signed in and is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the owner to create verification history.
      allow create: if isOwner(userId);

      // Allow the owner to get their verification history.
      allow get: if isOwner(userId);

      // Allow the owner to list their verification history.
      allow list: if isOwner(userId);

      // Allow the owner to update their verification history.
      allow update: if isOwner(userId) && resource != null;

      // Allow the owner to delete their verification history.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to educational document masters.
     * @path /document_masters/{masterId}
     * @allow (create) If the user is an admin.
     * @allow (get, list) If the user is an admin.
     * @allow (update, delete) If the user is an admin.
     * @deny (create, get, list, update, delete) If the user is not an admin.
     * @principle Restricts access to admins only.
     */
    match /document_masters/{masterId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Allow admins to create master documents.
      allow create: if isAdmin();

      // Allow admins to get master documents.
      allow get: if isAdmin();

      // Allow admins to list master documents.
      allow list: if isAdmin();

      // Allow admins to update master documents.
      allow update: if isAdmin() && resource != null;

      // Allow admins to delete master documents.
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to admin dashboards.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create) If the user is an admin.
     * @allow (get, list) If the user is an admin.
     * @allow (update, delete) If the user is an admin.
     * @deny (create, get, list, update, delete) If the user is not an admin.
     * @principle Restricts access to admins only.
     */
    match /admin_dashboards/{dashboardId} {
      // Helper function to check if the user is an admin.
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Allow admins to create dashboard data.
      allow create: if isAdmin();

      // Allow admins to get dashboard data.
      allow get: if isAdmin();

      // Allow admins to list dashboard data.
      allow list: if isAdmin();

      // Allow admins to update dashboard data.
      allow update: if isAdmin() && resource != null;

      // Allow admins to delete dashboard data.
      allow delete: if isAdmin() && resource != null;
    }
  }
}