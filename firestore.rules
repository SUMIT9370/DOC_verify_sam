/**
 * @fileoverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * uploaded documents, and verification checks. Admin access is granted based
 * on the presence of a user ID in the `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/documents/{documentId}: Stores documents uploaded by a specific user, accessible only by that user.
 * - /document_masters/{masterId}: Stores master documents, accessible only by admins.
 * - /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId}: Stores verification checks for a user's document, accessible only by that user.
 * - /roles_admin/{uid}: Collection used to grant admin privileges. If a document exists here for a user's UID, they are considered an admin.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only by admins.
 *
 * Key Security Decisions:
 * - Users can only access their own user profile and related data.
 * - Listing of users is disallowed.
 * - Admin privileges are granted by the presence of a document in the `/roles_admin/{uid}` collection.
 * - Data validation is limited to authorization-critical fields to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Documents are stored under `/users/{userId}/documents/{documentId}` and include the `userId` field to avoid needing to query parent documents for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot access other user profiles.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Grants access to documents uploaded by a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User can create documents under their own user ID.
     * @allow (get, update, delete) User can access their own documents.
     * @deny (create) User cannot create documents under other user IDs.
     * @deny (get, update, delete) User cannot access documents under other user IDs.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Grants access to master educational documents for admins only.
     * @path /document_masters/{masterId}
     * @allow (create, get, update, delete) Admins can manage master documents.
     * @deny (create, get, update, delete) Non-admins cannot manage master documents.
     * @principle Restricts access to admins.
     */
    match /document_masters/{masterId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to verification checks performed on documents, accessible by the document owner.
     * @path /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId}
     * @allow (create) User can create verification checks for their documents.
     * @allow (get, update, delete) User can access their own verification checks.
     * @deny (create) User cannot create verification checks for other user's documents.
     * @deny (get, update, delete) User cannot access verification checks for other user's documents.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.documentId == documentId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.documentId == documentId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.documentId == documentId;
    }

    /**
     * @description Grants access to admin role documents for admins only.
     * @path /roles_admin/{uid}
     * @allow (create) Only admins can create admin roles.
     * @allow (get, update, delete) Only admins can manage admin roles.
     * @deny (create) Non-admins cannot create admin roles.
     * @deny (get, update, delete) Non-admins cannot manage admin roles.
     * @principle Restricts access to admins.
     */
    match /roles_admin/{uid} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to admin dashboard data for admins only.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create, get, update, delete) Admins can manage the admin dashboard data.
     * @deny (create, get, update, delete) Non-admins cannot manage the admin dashboard data.
     * @principle Restricts access to admins.
     */
    match /admin_dashboards/{dashboardId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}