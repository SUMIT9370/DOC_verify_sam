/**
 * @file Firestore Security Rules for DocVerify
 * @version Prototyping
 *
 * @Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and verification histories,
 * with additional restrictions for admin-only access to document masters and admin dashboards.
 *
 * @Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - User verification histories are stored in `/users/{userId}/verification_history/{historyId}`.
 * - Master educational document templates are stored in `/document_masters/{masterId}`.
 * - Admin roles are stored in `/roles_admin/{uid}`.
 * - Admin dashboard data is stored in `/admin_dashboards/{dashboardId}`.
 *
 * @Key Security Decisions:
 * - Users can only access their own profile and verification history.
 * - Only users with an admin role (as defined in `/roles_admin/{uid}`) can access document masters and admin dashboards.
 * - User listing is not explicitly denied, assuming it is handled at the application level.
 *
 * @Denormalization for Authorization:
 *  - The `uid` field is included within the `/users/{userId}` document for fast `isOwner()` checks.
 *  - Admin status is checked by verifying the existence of a document at `/roles_admin/{uid}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access and modify their profile.
     * @deny (create) User attempting to create a profile with a mismatched UID.
     * @deny (update, delete) User attempting to modify a profile with a mismatched UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user verification history documents.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User with matching UID can create their history.
     * @allow (get, update, delete) User with matching UID can access and modify their history.
     * @deny (create) User attempting to create a history with a mismatched UID.
     * @deny (update, delete) User attempting to modify a history with a mismatched UID.
     * @principle Enforces document ownership for user verification histories.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to educational document master templates.
     * @path /document_masters/{masterId}
     * @allow (get, list) Admin users can read master templates.
     * @allow (create, update, delete) Only admin users can create, update, or delete master templates.
     * @deny Non-admin users cannot access or modify master templates.
     * @principle Restricts access to master templates to admin users.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{uid}
     * @allow create: if request.auth.uid == uid;
     * @allow get: if request.auth.uid == uid;
     * @allow update: if false;
     * @allow delete: if request.auth.uid == uid && resource != null;;
     * @allow list: if false;
     * @principle Restricts access to admin role documents to specific user.
     */
    match /roles_admin/{uid} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && request.auth.uid == uid;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
      allow delete: if isSignedIn() && request.auth.uid == uid && resource != null;
    }

    /**
     * @description Controls access to admin dashboard documents.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Admin users can read admin dashboard data.
     * @allow (create, update, delete) Only admin users can create, update, or delete admin dashboard data.
     * @deny Non-admin users cannot access or modify admin dashboard data.
     * @principle Restricts access to admin dashboard data to admin users.
     */
    match /admin_dashboards/{dashboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}