/**
 * @file Firestore Security Rules for DocVerify
 * @description This ruleset enforces a strict, role-based access control model for the DocVerify application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owning user.
 * - /users/{userId}/verification_history/{historyId}: Stores verification histories for users. Access is restricted to the owning user.
 * - /document_masters/{masterId}: Stores educational document templates. Access is restricted to admins.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data. Access is restricted to admins.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and verification history.
 * - Listing of documents in the `/users/{userId}` collection and its subcollections is allowed for the owner only.
 * - Admin access is controlled via the `isAdmin` flag on the user document.
 * - All write operations are strictly controlled, with authorization checks.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` field is denormalized onto the user document to avoid extra reads when checking admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owning user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) User can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny User cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure verification history. Only the owning user can read/write their own history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User can create their own verification history.
     * @allow (get, list, update, delete) User can access their own verification history.
     * @deny User cannot access another user's verification history.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure educational document templates. Only admins can read/write.
     * @path /document_masters/{masterId}
     * @allow (get, list) Admins can read the document masters.
     * @allow (create, update, delete) Only admins can create, update, or delete document masters.
     * @deny Non-admins cannot access document masters.
     * @principle Restricts access to admins only.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secure admin dashboard data. Only admins can read/write.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Admins can read the admin dashboards.
     * @allow (create, update, delete) Only admins can create, update, or delete admin dashboards.
     * @deny Non-admins cannot access admin dashboards.
     * @principle Restricts access to admins only.
     */
    match /admin_dashboards/{dashboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}