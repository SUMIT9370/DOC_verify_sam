/**
 * @file Firestore Security Rules for DocVerify
 * @description This ruleset enforces a strict user-ownership model for user profiles and verification histories.
 * Master document templates and admin dashboards are restricted to administrator access only.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles, with access control based on the `userId`.
 * - /users/{userId}/verification_history/{historyId}: Stores verification histories, accessible only by the owning user.
 * - /document_masters/{masterId}: Stores master document templates, accessible only by administrators.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only by administrators.
 *
 * @keySecurityDecisions
 * - User listing is disallowed.
 * - Admin access is determined by the `isAdmin` field in the user document.
 *
 * @denormalizationForAuthorization
 * - User documents include an `isAdmin` field to simplify admin role checks in the rules.
 *
 * @structuralSegregation
 * - User-specific data is nested under the /users/{userId} path, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) Authenticated user can only access their own profile.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (get, list, update, delete) An authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows the user to create their own profile, but only if the user id matches.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to verification history documents.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) Authenticated user can create history under their own profile.
     * @allow (get, list, update, delete) Authenticated user can only access history under their own profile.
     * @deny (create) An unauthenticated user cannot create history.
     * @deny (get, list, update, delete) An authenticated user cannot access another user's history.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to educational document master templates. Only admins can access.
     * @path /document_masters/{masterId}
     * @allow (get, list) Public read is allowed for these document masters.
     * @allow (create, update, delete) Only administrators can create, update, or delete master documents.
     * @deny (create, update, delete) Non-administrators cannot create, update, or delete master documents.
     * @principle Restricts write access to administrators only.
     */
    match /document_masters/{masterId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to admin dashboard data. Only admins can access.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Only administrators can get or list dashboard data.
     * @allow (create, update, delete) Only administrators can create, update, or delete dashboard data.
     * @deny (create, update, delete) Non-administrators cannot create, update, or delete dashboard data.
     * @principle Restricts access to administrators only.
     */
    match /admin_dashboards/{dashboardId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }
  }
}