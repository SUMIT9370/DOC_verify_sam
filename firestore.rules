/**
 * @file Firestore Security Rules for DocVerify
 *
 * @core_philosophy This ruleset enforces a strict, role-based access control model,
 *                  primarily based on user ownership and administrative privileges.
 *                  Data is segregated to prevent unauthorized access and maintain data integrity.
 *
 * @data_structure
 *   - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 *   - /users/{userId}/verification_history/{historyId}: Stores verification history for a specific user, only accessible by that user.
 *   - /document_masters/{masterId}: Stores master educational document templates, accessible only to administrators.
 *   - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only to administrators.
 *
 * @key_security_decisions
 *   - Listing of all users is disallowed to protect user privacy.
 *   - Admin privileges are determined by the `isAdmin` field in the user document.
 *   - Read and write access to user data is strictly controlled by user ID.
 *   - All write operations are validated to ensure data integrity and prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user is trying to create a profile for another user.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user verification history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create, get, list, update, delete) - If the user is the owner of the history record.
     * @deny (create, get, list, update, delete) - If the user is not the owner of the history record.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to master educational document templates.
     * @path /document_masters/{masterId}
     * @allow (get, list) - If the user is an admin.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, get, list, update, delete) - If the user is not an admin.
     * @principle Restricts access to admins.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list, create, update, delete) - If the user is an admin.
     * @deny (get, list, create, update, delete) - If the user is not an admin.
     * @principle Restricts access to admins.
     */
    match /admin_dashboards/{dashboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}