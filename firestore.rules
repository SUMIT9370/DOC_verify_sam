/**
 * @fileOverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users have full access to their own data trees under `/users/{userId}`.
 * Administrative users have privileged access to document master templates and admin dashboards.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history for each user.
 * - /document_masters/{masterId}: Stores master document templates.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data.
 *
 * Key Security Decisions:
 * - Only admins can create, update, or delete master documents and view admin dashboards.
 * - Users can only access their own verification history.
 * - Data validation is minimal in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` flag is denormalized onto the `/users/{userId}` document to avoid collection group queries for determining admin status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents based on ownership.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the user's UID matches the `userId` in the path.
     * @deny (get, list, create, update, delete) if the user's UID does not match the `userId` in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to verification history documents based on ownership.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (get, list, create, update, delete) if the user's UID matches the `userId` in the path.
     * @deny (get, list, create, update, delete) if the user's UID does not match the `userId` in the path.
     * @principle Restricts access to a user's own verification history.
     */
    match /users/{userId}/verification_history/{historyId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isSignedIn() && resource.data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to document master templates to admins only.
     * @path /document_masters/{masterId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) only to admin users.
     * @deny (create, update, delete) to non-admin users.
     * @principle Restricts access to admin-managed document templates.
     */
    match /document_masters/{masterId} {

       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingAdmin() {
          return isSignedIn() && isAdmin() && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isExistingAdmin();
      allow delete: if isSignedIn() && isExistingAdmin();
    }

    /**
     * @description Grants access to admin dashboard data to admins only.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list, create, update, delete) only to admin users.
     * @deny (get, list, create, update, delete) to non-admin users.
     * @principle Restricts access to admin-specific dashboard data.
     */
    match /admin_dashboards/{dashboardId} {
         function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingAdmin() {
          return isSignedIn() && isAdmin() && resource != null;
      }

      allow get, list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isExistingAdmin();
      allow delete: if isSignedIn() && isExistingAdmin();
    }
  }
}