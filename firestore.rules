/**
 * @file Firestore Security Rules for DocVerify
 * @description This ruleset enforces a strict user-ownership model for user data and restricts access to admin-related data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/verification_history/{historyId}: Stores verification histories, accessible only to the user.
 * - /document_masters/{masterId}: Stores master document templates, accessible only to admins.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data scraping.
 * - Admin access is determined by the `isAdmin` flag on the user document.
 * - Data validation is minimal during this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` field is denormalized onto the user document to avoid collection group queries and enforce admin-only access to certain resources.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with uid 'user123' can read, update, and delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with uid 'user456' cannot create a profile with userId 'user123'.
     * @deny (get, update, delete) User with uid 'user456' cannot read, update, or delete profile with userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for user's verification history. Only the user can read and write their own history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User with uid 'user123' can create a history record under their profile.
     * @allow (get, update, delete) User with uid 'user123' can read, update, and delete history record under their profile.
     * @deny (create) User with uid 'user456' cannot create a history record under user 'user123' profile.
     * @deny (get, update, delete) User with uid 'user456' cannot read, update, or delete history record under user 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for educational document masters. Only admins can read and write these documents.
     * @path /document_masters/{masterId}
     * @allow (create, get, update, delete) Admin user can create, read, update, and delete document masters.
     * @deny (create, get, update, delete) Non-admin user cannot create, read, update, or delete document masters.
     * @principle Restricts access to admins only.
     */
    match /document_masters/{masterId} {
        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Enforces access control for admin dashboards. Only admins can read and write these documents.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create, get, update, delete) Admin user can create, read, update, and delete admin dashboards.
     * @deny (create, get, update, delete) Non-admin user cannot create, read, update, or delete admin dashboards.
     * @principle Restricts access to admins only.
     */
    match /admin_dashboards/{dashboardId} {
        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}