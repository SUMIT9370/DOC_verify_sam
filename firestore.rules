/**
 * @file Firebase Security Rules for DocVerify
 * @description This ruleset enforces a strict user-ownership model for user profiles and verification histories,
 *              and restricts access to admin-related data (document masters and dashboards) to admin users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history, accessible only to the owning user.
 * - /document_masters/{masterId}: Stores master educational document templates, accessible only to admins.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only to admins.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path (`userId`).
 * - Admin privileges are determined by the `isAdmin` flag on the user's profile.
 * - Listing of document masters and admin dashboards is only allowed for admins.
 * - Read access to document masters and admin dashboards is not public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with uid 'user123' can read their profile.
     * @allow (update) User with uid 'user123' can update their profile.
     * @allow (delete) User with uid 'user123' can delete their profile.
     * @deny (create) User with uid 'user456' cannot create a profile for userId 'user123'.
     * @deny (get) User with uid 'user456' cannot read user profile 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verified Identity:  isSignedIn() ensures a valid Firebase Auth user.
      // Ownership:          isOwner(userId) ensures path consistency.
      // Self-Creation:      On create, validate request.auth.uid == userId.
      // On Update: Enforce immutability for the userId.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing of all users
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to verification history entries for a specific user.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User with uid 'user123' can create a history entry under their profile.
     * @allow (get) User with uid 'user123' can read their own history entry.
     * @allow (update) User with uid 'user123' can update their own history entry.
     * @allow (delete) User with uid 'user123' can delete their own history entry.
     * @deny (create) User with uid 'user456' cannot create a history entry under user 'user123'.
     * @deny (get) User with uid 'user456' cannot read user 'user123' history entry.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/verification_history/{historyId} {
      // Verified Identity:  isSignedIn() ensures a valid Firebase Auth user.
      // Ownership:          isOwner(userId) ensures path consistency.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to master educational document templates.
     * @path /document_masters/{masterId}
     * @allow (get) Admin user can read a document master.
     * @allow (list) Admin user can list document masters.
     * @allow (create) Admin user can create a document master.
     * @allow (update) Admin user can update a document master.
     * @allow (delete) Admin user can delete a document master.
     * @deny (get) Non-admin user cannot read document masters.
     * @deny (create) Non-admin user cannot create document masters.
     * @principle Restricts access to admins only.
     */
    match /document_masters/{masterId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get) Admin user can read the admin dashboard.
     * @allow (list) Admin user can list admin dashboards.
     * @allow (create) Admin user can create an admin dashboard.
     * @allow (update) Admin user can update the admin dashboard.
     * @allow (delete) Admin user can delete the admin dashboard.
     * @deny (get) Non-admin user cannot read the admin dashboard.
     * @deny (create) Non-admin user cannot create admin dashboards.
     * @principle Restricts access to admins only.
     */
    match /admin_dashboards/{dashboardId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}