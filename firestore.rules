/**
 * @file Firestore Security Rules for DocVerify.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 *  and restricts administrative data access to authorized admins only. It leverages
 *  path-based authorization and explicit admin role definitions.
 * @data_structure
 *  - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *  - /users/{userId}/verification_history/{historyId}: Stores verification history, accessible only by the user.
 *  - /document_masters/{masterId}: Stores educational document templates, accessible only by admins.
 *  - /roles_admin/{uid}: Defines admin roles; presence of a document grants admin privileges.
 *  - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only by admins.
 * @key_security_decisions
 *  - User listing is disallowed to protect privacy.
 *  - Admin privileges are explicitly granted via the `roles_admin` collection.
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching {userId} can create their profile.
     * @allow (get, update, delete) User with matching {userId} can access/modify their profile.
     * @deny (create, get, update, delete) Any other user cannot access this data.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to verification history for a specific user.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create, get, list, update, delete) User with matching {userId} can manage their verification history.
     * @deny (create, get, list, update, delete) Any other user cannot access this data.
     * @principle Restricts access to a user's own verification history.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to master educational document templates.
     * @path /document_masters/{masterId}
     * @allow (create, get, list, update, delete) Only admins can manage these documents.
     * @deny (create, get, list, update, delete) Non-admins cannot access this data.
     * @principle Restricts access to educational document templates to admins only.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Defines admin roles based on the existence of a document in this collection.
     * @path /roles_admin/{uid}
     * @allow (create) Only allow creating by an admin
     * @allow (get, list) Only admins can see who is admin
     * @deny (update, delete) Not supported, admin role is granted via this collection
     * @principle Defines admin roles; existence of a document grants admin privileges.
     */
    match /roles_admin/{uid} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create, get, list, update, delete) Only admins can manage dashboard data.
     * @deny (create, get, list, update, delete) Non-admins cannot access this data.
     * @principle Restricts access to admin dashboard data to admins only.
     */
    match /admin_dashboards/{dashboardId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}