/**
 * @fileOverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and verification histories.
 * Administrative functions (master document management, dashboard access) are restricted to users with admin privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/verification_history/{historyId}: Stores verification histories for each user.
 * - /document_masters/{masterId}: Stores master educational document templates (admin-only).
 * - /roles_admin/{uid}: Collection that determines admin privileges.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data (admin-only).
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the user themselves.
 * - Verification histories are private and only accessible to the user who created them.
 * - Master educational documents and admin dashboards are only accessible to admins.
 * - Listing of users is disallowed.
 * - The existence of a document in `/roles_admin/{uid}` grants admin privileges to the user with the matching `uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own profile with id 'user123'.
     * @deny (create) User with uid 'user123' cannot create a profile with id 'user456'.
     * @allow (get, update, delete) User with uid 'user123' can get, update, and delete their own profile with id 'user123'.
     * @deny (get, update, delete) User with uid 'user123' cannot get, update, and delete a profile with id 'user456'.
     * @principle Enforces document ownership for writes; restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure verification history for each user. Users can only access their own verification history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User with uid 'user123' can create a history record in their own profile.
     * @deny (create) User with uid 'user123' cannot create a history record in another user's profile.
     * @allow (get, list, update, delete) User with uid 'user123' can get, list, update and delete history records in their own profile.
     * @deny (get, list, update, delete) User with uid 'user123' cannot get, list, update or delete history records in another user's profile.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secure master educational document templates. Only admins can create, read, update, and delete these documents.
     * @path /document_masters/{masterId}
     * @allow (get, list) Admins can get and list document masters.
     * @deny (get, list) Non-admins cannot get or list document masters.
     * @allow (create, update, delete) Admins can create, update, and delete document masters.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete document masters.
     * @principle Restricts access to a collection based on admin role.
     */
    match /document_masters/{masterId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure admin role documents.  These documents are only created and managed through backend functions.
     * @path /roles_admin/{uid}
     */
    match /roles_admin/{uid} {
       function isAdmin() {
         return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
       }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure admin dashboard data. Only admins can access this data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Admins can get and list admin dashboards.
     * @deny (get, list) Non-admins cannot get or list admin dashboards.
     * @allow (create, update, delete) Admins can create, update, and delete admin dashboards.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete admin dashboards.
     * @principle Restricts access to a collection based on admin role.
     */
    match /admin_dashboards/{dashboardId} {
     function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}