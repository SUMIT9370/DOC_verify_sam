/**
 * @file Firestore Security Rules for DocVerify.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and restricts administrative data to authorized admin users. Data shape validation is relaxed
 * to facilitate rapid prototyping.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history for each user.
 * - /document_masters/{masterId}: Stores educational document master templates.
 * - /roles_admin/{uid}:  Collection that stores admin roles.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data.
 *
 * @key_security_decisions
 * - Listing of users is disallowed.
 * - Admin status is determined by the existence of a document in `/roles_admin/{uid}`.
 * - All write operations are protected by authorization checks.
 *
 * @denormalization_for_authorization
 * - Admin status is checked via `exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Unauthenticated users cannot create profiles.
     * @deny (update, delete) Users cannot modify or delete other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Secure access to user verification history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) Authenticated user can create their own verification history.
     * @allow (get, list, update, delete) Authenticated user can only access their own verification history.
     * @deny (create) Unauthenticated users cannot create verification history.
     * @deny (get, list, update, delete) Users cannot access other user's verification history.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to educational document masters.
     * @path /document_masters/{masterId}
     * @allow (get, list) Admin users can read educational document masters.
     * @allow (create, update, delete) Only admin users can create, update, or delete educational document masters.
     * @deny (get, list, create, update, delete) Non-admin users cannot access educational document masters.
     * @principle Restricts access to a collection based on admin privileges.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Secure access to admin roles.
      * @path /roles_admin/{uid}
      * @allow (get) Only admin users can see which other users are admins.
      * @allow (create, update, delete) Only admin users can modify the admin roles.
      * @deny (list) Listing all admin roles is disallowed.
      * @principle Restricts access to a collection based on admin privileges.
      */
     match /roles_admin/{uid} {
      function isSignedIn() {
          return request.auth != null;
        }
        function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }

    /**
     * @description Secure access to admin dashboards.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Admin users can read admin dashboards.
     * @allow (create, update, delete) Only admin users can create, update, or delete admin dashboards.
     * @deny (get, list, create, update, delete) Non-admin users cannot access admin dashboards.
     * @principle Restricts access to a collection based on admin privileges.
     */
    match /admin_dashboards/{dashboardId} {
       function isSignedIn() {
          return request.auth != null;
        }
        function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}