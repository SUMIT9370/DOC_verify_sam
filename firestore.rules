/**
 * @fileoverview Firestore Security Rules for DocVerify
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and restricts access to administrative data based on the `isAdmin` flag. It prioritizes security by default, denying access unless explicitly granted.  Data shape validation is minimized to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history for a user, accessible only to the user.
 * - /document_masters/{masterId}: Stores educational document templates, accessible only to admins.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible only to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information harvesting.
 * - Admin privileges are determined by the `isAdmin` field in the user's document.
 * - Read and write access is explicitly denied unless specific conditions are met.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` flag is stored directly on the user document to avoid additional reads when checking for admin privileges.
 *
 * Structural Segregation:
 * - User-specific data (verification history) is stored in subcollections under the user's document, ensuring private data is not mixed with public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their own profile.
     * @allow (get, update, delete) User with matching userId can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched userId.
     * @deny (get, list, update, delete) User cannot access other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user verification history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User with matching userId can create a new history entry.
     * @allow (get, list, update, delete) User with matching userId can read, update, and delete their own history entries.
     * @deny (create) User cannot create a history entry with a mismatched userId.
     * @deny (get, list, update, delete) User cannot access other user's history entries.
     * @principle Enforces document ownership for verification history.
     */
    match /users/{userId}/verification_history/{historyId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to educational document templates.
     * @path /document_masters/{masterId}
     * @allow (get, list) Public read access for all users.
     * @allow (create, update, delete) Only admin users can create, update, or delete document masters.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete document masters.
     * @principle Restricts write access to admins only.
     */
    match /document_masters/{masterId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list, create, update, delete) Only admin users can access admin dashboard data.
     * @deny (get, list, create, update, delete) Non-admin users cannot access admin dashboard data.
     * @principle Restricts access to admins only.
     */
    match /admin_dashboards/{dashboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}