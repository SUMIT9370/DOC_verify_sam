/**
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * and role-based access control for admin-managed data. It prioritizes
 * security by defaulting to restrictive rules and explicitly granting
 * permissions only where necessary.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Only the user themselves can read and write.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history. Only the user can access this data.
 * - /document_masters/{masterId}: Stores document master templates. Only admins can manage these.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data. Only admins can access.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Validation is minimized for prototyping, focusing on ownership and relationship integrity.
 * - Ambiguous scenarios default to the most secure option (denied access).
 *
 * Denormalization for Authorization:
 * - The `isAdmin` field is denormalized into the `/users/{userId}` document to avoid costly `get()` calls to a separate admin role collection.
 *
 * Structural Segregation:
 * - Private user data is stored in a user-specific subcollection (`/users/{userId}/...`) to ensure easy, secure access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Only if the authenticated user's UID matches the userId.
     * @allow (get, list) - Only if the authenticated user's UID matches the userId.
     * @allow (update, delete) - Only if the authenticated user's UID matches the userId and the document exists.
     * @deny (list) - Prevents listing all users.
     * @principle Enforces document ownership and prevents unauthorized listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to verification history for a specific user.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create, get, list) - Only if the authenticated user's UID matches the userId.
     * @allow (update, delete) - Only if the authenticated user's UID matches the userId and the document exists.
     * @principle Restricts access to a user's own verification history.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
            function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to document master templates.
     * @path /document_masters/{masterId}
     * @allow (create, get, list, update, delete) - Only if the authenticated user is an administrator.
     * @principle Restricts management of document masters to administrators.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
              return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create, get, list, update, delete) - Only if the authenticated user is an administrator.
     * @principle Restricts access to admin dashboard data to administrators.
     */
    match /admin_dashboards/{dashboardId} {
            function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }
  }
}