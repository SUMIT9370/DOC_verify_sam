/**
 * @fileOverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and restricts access to admin-level data based on the `isAdmin` flag.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history for each user.
 * - /document_masters/{masterId}: Stores educational document templates.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Only admins can read/write document masters and admin dashboards.
 * - Default security posture is strict: explicit `allow` rules are required for all operations.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` flag is denormalized onto the user document to avoid needing to query a separate collection for admin status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can access and modify their profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for verification history documents.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) User with matching ID can create history entries.
     * @allow (get, update, delete) User with matching ID can access and modify their history entries.
     * @deny (create) User cannot create a history entry with a mismatched ID.
     * @deny (list) Only the owner can list their history.
     * @principle Enforces document ownership and prevents cross-user data access.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for document master templates.
     * @path /document_masters/{masterId}
     * @allow (get, list) Admin users can read document master templates.
     * @allow (create, update, delete) Admin users can manage document master templates.
     * @deny (get, list, create, update, delete) Non-admin users cannot access or modify document master templates.
     * @principle Restricts access to sensitive data based on admin privileges.
     */
    match /document_masters/{masterId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        allow get: if isSignedIn() && isAdmin();
        allow list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin() && resource != null;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Enforces access control for admin dashboards.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Admin users can read admin dashboard data.
     * @allow (create, update, delete) Admin users can manage admin dashboard data.
     * @deny (get, list, create, update, delete) Non-admin users cannot access or modify admin dashboard data.
     * @principle Restricts access to sensitive data based on admin privileges.
     */
    match /admin_dashboards/{dashboardId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        allow get: if isSignedIn() && isAdmin();
        allow list: if isSignedIn() && isAdmin();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin() && resource != null;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}