/**
 * @description This ruleset enforces a strict user-ownership model for user data, restricts master document access to admins, and protects admin dashboard information.
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles.
 *  - /users/{userId}/verification_history/{historyId}: Stores verification history entries for each user.
 *  - /document_masters/{masterId}: Stores educational document templates (admin-only access).
 *  - /admin_dashboards/{dashboardId}: Stores admin-specific dashboard data (admin-only access).
 * @keySecurityDecisions
 *  - User listing is explicitly denied.
 *  - Ambiguous or unspecified relationships default to strict owner-only access.
 *  - Public read access is not granted to any collection containing private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read or modify their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, update, and delete their own profile at /users/user_abc.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces user-ownership for profile data and enables self-creation.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Read permissions:
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Write permissions:
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Manages access to verification history entries for a specific user. Only the authenticated user can manage their own history.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create, get, list, update, delete) - Authenticated user 'user_abc' can create, read, update, and delete their own history entries under /users/user_abc/verification_history/{historyId}.
     * @deny (create, get, list, update, delete) - Authenticated user 'user_xyz' cannot access the history entries under /users/user_abc/verification_history/{historyId}.
     * @principle Enforces strict user-ownership for all history entries.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Read permissions:
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write permissions:
      allow create: if isSignedIn(); // No owner validation, allows flexible data shapes in this prototype
      allow update: if isSignedIn(); // No owner validation, allows flexible data shapes in this prototype
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to educational document master templates. Only authenticated admins can create, read, update, or delete these templates.
     * @path /document_masters/{masterId}
     * @allow (create, get, list, update, delete) - Authenticated admin users (isAdmin == true) can perform any operation on document master templates.
     * @deny (create, get, list, update, delete) - Authenticated non-admin users (isAdmin == false) cannot access document master templates.
     * @principle Enforces role-based access control, restricting template management to authorized personnel.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      // Read permissions:
      allow get, list: if isAdmin();

      // Write permissions:
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to the admin dashboard data. Only authenticated admin users can read and modify this information.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create, get, list, update, delete) - Authenticated admin users (isAdmin == true) can manage the admin dashboard data.
     * @deny (create, get, list, update, delete) - Authenticated non-admin users (isAdmin == false) cannot access admin dashboard data.
     * @principle Enforces role-based access control for sensitive administrative data.
     */
    match /admin_dashboards/{dashboardId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        }

        // Read permissions:
        allow get, list: if isAdmin();

        // Write permissions:
        allow create, update, delete: if isAdmin();
    }
  }
}