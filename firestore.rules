/**
 * @fileoverview Firestore Security Rules for DocVerify.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * verification histories. Administrative access is required for document masters
 * and admin dashboards. All data access is authenticated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /users/{userId}/verification_history/{historyId}: Stores verification history
 *   for each user, accessible only to the user themselves.
 * - /document_masters/{masterId}: Stores master document templates, accessible
 *   only to administrators.
 * - /admin_dashboards/{dashboardId}: Stores admin dashboard data, accessible
 *   only to administrators.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and verification histories.
 * - Only administrators can create, update, or delete document masters and access
 *   admin dashboard data.
 * - User listing is not allowed.
 * - All writes require authentication.
 *
 * Denormalization for Authorization:
 *  - The isAdmin field is denormalized directly onto the user document in `/users/{userId}` to allow for fast, simple admin checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId in the path.
     * @allow (get) - If the user's auth UID matches the userId in the path.
     * @allow (update) - If the user's auth UID matches the userId in the path.
     * @allow (delete) - If the user's auth UID matches the userId in the path.
     * @allow (list) - Denied. User listing is not permitted.
     * @deny (create) - If the user's auth UID does not match the userId in the path.
     * @deny (update) - If the user's auth UID does not match the userId in the path.
     * @deny (delete) - If the user's auth UID does not match the userId in the path and the document doesn't exist.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to verification history for a user.
     * @path /users/{userId}/verification_history/{historyId}
     * @allow (create) - If the user's auth UID matches the userId in the path.
     * @allow (get) - If the user's auth UID matches the userId in the path.
     * @allow (update) - If the user's auth UID matches the userId in the path.
     * @allow (delete) - If the user's auth UID matches the userId in the path.
     * @allow (list) - If the user's auth UID matches the userId in the path.
     * @deny (create) - If the user's auth UID does not match the userId in the path.
     * @deny (update) - If the user's auth UID does not match the userId in the path.
     * @deny (delete) - If the user's auth UID does not match the userId in the path and the document doesn't exist.
     * @principle Enforces document ownership for verification history.
     */
    match /users/{userId}/verification_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to educational document masters.
     * @path /document_masters/{masterId}
     * @allow (create) - If the user is an admin.
     * @allow (get) - If the user is an admin.
     * @allow (update) - If the user is an admin.
     * @allow (delete) - If the user is an admin.
     * @allow (list) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @deny (update) - If the user is not an admin and the document doesn't exist.
     * @deny (delete) - If the user is not an admin and the document doesn't exist.
     * @principle Restricts access to document masters to admins.
     */
    match /document_masters/{masterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }


      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Controls access to admin dashboards.
     * @path /admin_dashboards/{dashboardId}
     * @allow (create) - If the user is an admin.
     * @allow (get) - If the user is an admin.
     * @allow (update) - If the user is an admin.
     * @allow (delete) - If the user is an admin.
     * @allow (list) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @deny (update) - If the user is not an admin and the document doesn't exist.
     * @deny (delete) - If the user is not an admin and the document doesn't exist.
     * @principle Restricts access to admin dashboards to admins.
     */
    match /admin_dashboards/{dashboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

        function isExistingAdmin() {
        return isAdmin() && resource != null;
      }


      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }
  }
}