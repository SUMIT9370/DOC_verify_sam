/**
 * @file Firebase Security Rules for DocVerify
 * @version Prototyping Mode - Data shape is not strictly validated.
 *
 * @description This ruleset enforces a user-ownership model for most data,
 * with admin-only access for sensitive data and operations.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/documents/{documentId}: Documents uploaded by the user.
 * - /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId}: Verification checks for a specific document.
 * - /document_masters/{masterId}: Master document templates, accessible only to admins.
 * - /roles_admin/{uid}: Admin role assignments.
 * - /admin_dashboards/{dashboardId}: Admin dashboard data, accessible only to admins.
 *
 * Key Security Decisions:
 * - Strict user-ownership for all user-related data (profiles, documents, verification checks).
 * - Admin-only access for master document templates and admin dashboards.
 * - Admin role is determined by the existence of a document in `/roles_admin/{uid}`.
 * - No public listing of user documents or verification checks.
 *
 * Denormalization for Authorization:
 * - Documents and VerificationChecks are nested under /users/{userId} and /users/{userId}/documents/{documentId} respectively,
 *   allowing path-based access control without requiring additional `get()` calls.
 * - Admin status is checked via the `isAdmin()` helper function, which looks up the user's UID in the `/roles_admin/{uid}` collection.
 *
 * Structural Segregation:
 * - Public vs. private content is separated by collection location. Private content resides under `/users/{userId}`,
 *   while admin-controlled content resides in top-level collections like `/document_masters` and `/admin_dashboards`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (update, delete) A user cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages documents uploaded by users.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) Authenticated user can create a document under their user ID.
     * @allow (get, update, delete) Authenticated user can access and modify their own documents.
     * @deny (create) An unauthenticated user cannot create a document.
     * @deny (update, delete) A user cannot modify another user's documents.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/documents/{documentId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages master educational document templates.
     * @path /document_masters/{masterId}
     * @allow (get, list) Any user can read master documents.
     * @deny (create, update, delete) Only admins can modify master documents.
     * @principle Restricts access to admins only.
     */
    match /document_masters/{masterId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages verification checks performed on documents.
     * @path /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId}
     * @allow (create) Authenticated user can create a verification check under their document.
     * @allow (get, update, delete) Authenticated user can access and modify their own verification checks.
     * @deny (create) An unauthenticated user cannot create a verification check.
     * @deny (update, delete) A user cannot modify another user's verification checks.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/documents/{documentId}/verificationChecks/{verificationCheckId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) Only an admin can assign another admin role.
     * @allow (get) Any authenticated user can check if they have admin privileges.
     * @deny (create, update, delete) Non-admins cannot modify admin roles.
     * @principle Restricts role management to admins only.
     */
    match /roles_admin/{uid} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn(); // Any signed-in user can check their admin status
      allow list: if false; // No listing of admin roles
      allow create: if isAdmin();
      allow update: if false; // Admin roles should be created and deleted, not updated.
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages admin dashboard data.
     * @path /admin_dashboards/{dashboardId}
     * @allow (get, list) Only admins can view dashboard data.
     * @deny (create, update, delete) Only admins can modify dashboard data.
     * @principle Restricts access to admins only.
     */
    match /admin_dashboards/{dashboardId} {
      // Utilities
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
     /**
      * @description Prevents listing on verification_history documents.
      * @path /users/{userId}/verification_history
      * @allow (get, update, delete) Authenticated user can access and modify their own verification_history documents.
      * @deny (create) An unauthenticated user cannot create a verification_history document.
      *  @deny (list) Listing verification_history is not allowed.
      * @deny (update, delete) A user cannot modify another user's verification_history documents.
      * @principle Enforces document ownership for writes.
      */
     match /users/{userId}/verification_history/{verificationHistoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}